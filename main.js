/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var p=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var w=Object.prototype.hasOwnProperty;var y=(c,o)=>{for(var e in o)p(c,e,{get:o[e],enumerable:!0})},N=(c,o,e,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let s of k(o))!w.call(c,s)&&s!==e&&p(c,s,{get:()=>o[s],enumerable:!(t=T(o,s))||t.enumerable});return c};var v=c=>N(p({},"__esModule",{value:!0}),c);var I={};y(I,{default:()=>f});module.exports=v(I);var i=require("obsidian"),b={taskFormats:["[ACTION]","[action]"],indexNotePath:"Taskmaster.md",autoRefresh:!0,includeHeaders:!0,refreshInterval:3e5},f=class extends i.Plugin{constructor(){super(...arguments);this.refreshDebounceTimer=null}async onload(){await this.loadSettings(),this.addSettingTab(new m(this.app,this)),this.addCommand({id:"refresh-taskmaster",name:"Refresh Taskmaster",callback:()=>this.refreshIndex()}),this.addRibbonIcon("file-check-2","Refresh Taskmaster",()=>{this.refreshIndex()}),this.settings.autoRefresh&&this.registerEvent(this.app.vault.on("modify",()=>{this.debouncedRefresh()})),this.app.workspace.onLayoutReady(()=>this.refreshIndex())}async loadSettings(){this.settings=Object.assign({},b,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}debouncedRefresh(){this.refreshDebounceTimer&&clearTimeout(this.refreshDebounceTimer),this.refreshDebounceTimer=setTimeout(()=>this.refreshIndex(),this.settings.refreshInterval)}async refreshIndex(){try{let e=await this.scanVaultForTasks();await this.generateIndexNote(e),new i.Notice("Task index updated")}catch(e){new i.Notice("Error updating task index: "+e.message),console.error("Task Index Error:",e)}}async scanVaultForTasks(){let e=[],t=this.app.vault.getMarkdownFiles();for(let s of t){if(s.path===this.settings.indexNotePath)continue;let r=(await this.app.vault.read(s)).split(`
`),h=[],d=!1;for(let l=0;l<r.length;l++){let a=r[l];if(a.trim().startsWith("```")){d=!d;continue}if(!d){if(a.startsWith("#")&&a.includes(" ")&&!a.startsWith("#tag")&&!a.match(/^#\w+$/)){let u=a.match(/^#+\s/);if(u){let g=u[0].trim().length;h[g-1]=a.replace(/^#+\s+/,""),h.length=g}}for(let u of this.settings.taskFormats){let g=a.trimStart().startsWith(u),x=!a.includes("`")&&!d;g&&x&&!a.match(/\[(x|X)\]/)&&e.push({text:a.trim(),sourcePath:s.path,lineNumber:l+1,headers:[...h]})}}}}return e}async generateIndexNote(e){let t=this.formatIndexContent(e),s=this.app.vault.getAbstractFileByPath(this.settings.indexNotePath);s instanceof i.TFile?await this.app.vault.modify(s,t):await this.app.vault.create(this.settings.indexNotePath,t)}formatIndexContent(e){let t=["# Taskmaster","","Generated: "+new Date().toLocaleString(),""],s=e.reduce((n,r)=>{let h=r.headers.join(" > ")||"No Context";return n[r.sourcePath]||(n[r.sourcePath]={}),n[r.sourcePath][h]||(n[r.sourcePath][h]=[]),n[r.sourcePath][h].push(r),n},{});for(let[n,r]of Object.entries(s)){t.push(`### [[${n}]]`);for(let[h,d]of Object.entries(r)){let l=h.split(" > ").pop();if(this.settings.includeHeaders&&h!=="No Context"&&l){let a=l.replace(/[\[\]]/g,"").replace(/[^a-zA-Z0-9\s-]/g,"").trim();t.push(`**Context: [[${n}#${a}|${h}]]**`)}for(let a of d){let u=a.text.replace(/^[-*]\s*\[[x ]\]\s*/i,"").replace(/^\[(ACTION|action)\]\s*/,"\u2192 ");t.push(`\u2610 ${u} (L${a.lineNumber})`)}t.push("")}}return t.join(`
`)}},m=class extends i.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Taskmaster Settings"}),new i.Setting(e).setName("Task Formats").setDesc("Enter task formats to track, one per line").addTextArea(t=>t.setPlaceholder(`- [ ]
* [ ]`).setValue(this.plugin.settings.taskFormats.join(`
`)).onChange(async s=>{this.plugin.settings.taskFormats=s.split(`
`).map(n=>n.trim()).filter(n=>n.length>0),await this.plugin.saveSettings()})),new i.Setting(e).setName("Index Note Path").setDesc("Path where the task index will be created").addText(t=>t.setPlaceholder("Taskmaster.md").setValue(this.plugin.settings.indexNotePath).onChange(async s=>{this.plugin.settings.indexNotePath=s,await this.plugin.saveSettings()})),new i.Setting(e).setName("Auto Refresh").setDesc("Automatically refresh index when files change").addToggle(t=>t.setValue(this.plugin.settings.autoRefresh).onChange(async s=>{this.plugin.settings.autoRefresh=s,await this.plugin.saveSettings()})),new i.Setting(e).setName("Include Headers").setDesc("Include header hierarchy for context").addToggle(t=>t.setValue(this.plugin.settings.includeHeaders).onChange(async s=>{this.plugin.settings.includeHeaders=s,await this.plugin.saveSettings()})),new i.Setting(e).setName("Refresh Interval").setDesc("Minutes to wait before auto-refreshing (min: 5)").addText(t=>t.setPlaceholder("5").setValue(String(this.plugin.settings.refreshInterval/6e4)).onChange(async s=>{let n=Number(s)*6e4;n>=3e5&&(this.plugin.settings.refreshInterval=n,await this.plugin.saveSettings())}))}};
